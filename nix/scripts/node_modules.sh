#!/usr/bin/env bash

#
# Check if we need to copy node_modules.
# (e.g. in case it has been modified after last copy)
#
# The reasoning for a (mostly) read-only node_modules folder:
#   ideally we’d symlink the folder directly to the Nix store
#   so that we’re guaranteed to have a reproducible source.
#   Unfortunately react-native wants to build some stuff after the fact
#   and this is incompatible with the concept of a pure Nix package.
#   Therefore we copy the whole source to the repo directory,
#   allow writing only on the folders where it is absolutely required,
#   and therefore we still keep some peace of mind that the rest
#   of node_modules is unchanged the rest of the time.
#

set -Eeuo pipefail

GIT_ROOT=$(cd "${BASH_SOURCE%/*}" && git rev-parse --show-toplevel)
source "${GIT_ROOT}/scripts/colors.sh"

# More concise output from 'time'
export TIMEFORMAT="Done in: %Es"

function removeDir() {
    [[ ! -d "${tmp}" ]] && return
    chmod -R u+w "${tmp}"
    rm -rf "${tmp}"
}

function copyNodeModules() {
  local src="${1}"
  local dst="${2}"
  local tmp=$(mktemp -d -p $(dirname ${dst}))

  # We use a temporary directory to use mv as "atomic" change
  trap "removeDir ${tmp}" ERR INT HUP

  # WARNING: The -L here is crucial to let Metro find modules.
  cp -LRf ${src}/node_modules/. "${tmp}"
  chmod -R u+w "${tmp}"

  # WARNING: We can't de-reference .bin symlinks
  cp -Rf ${src}/node_modules/.bin/. "${tmp}/.bin/"
  mv -f "${tmp}" "${dst}"
}

function findFilesNewerThan() {
  local sentinel="${1}"
  local dir="${2}"
  find ${dir} -type f -writable \
      -newer ${sentinel} \
      -not -ipath "${dir}/*/*android/build/*" -prune \
      -print 
}

function replaceNodeModules() {
  local src="$1"
  local dst="$2"
  local hasChanged=1
  local sentinelFile="${dst}/.copied~"

  # Check if node_modules exists and is valid
  if [ -d "${dst}" ]; then
    if [ -f "${sentinelFile}" ]; then
      currentSrc="$(cat ${sentinelFile})"
      if [ "${currentSrc}" != "${src}" ]; then
        echo -e "${YLW}Yarn modules changed, copying new version over${RST}"
      else
          modifiedFiles=($(findFilesNewerThan "${sentinelFile}" "${dst}"))
        if [ ${#modifiedFiles[@]} -eq 0 ]; then
          hasChanged=0
          echo -e "${GRN}No changes detected.${RST}"
        else
          echo -e "${YLW}Changes detected in node_modules:${RST} ${#modifiedFiles[@]}"
          for file in ${modifiedFiles[@]}; do
            echo "- $(realpath --relative-to=${dst} ${file})"
          done
        fi
      fi
    fi
    if [[ ${hasChanged} -eq 1 ]]; then
      rm -rf ${dst}
    fi
  fi

  # Replace node_modules if necessary
  if [[ ! -d "${dst}" ]]; then
    echo "Copying node_modules from Nix store:"
    echo " - ${src}"
    copyNodeModules ${src} ${dst}
    echo -n "${src}" > "${sentinelFile}"
  fi
}

# Destination folder, Nix sets STATUS_REACT_HOME
dst="$STATUS_REACT_HOME/node_modules"
# Source of Node modules from /nix/store
src="$1"

if [[ ! -d ${src} ]]; then
    echo -e "${RED}No such folder:${RST} ${src}" >&2
    exit 1
fi

# Make those available in shell spawned by flock
export -f replaceNodeModules copyNodeModules findFilesNewerThan removeDir

mkdir -p "${dst}"
# Leverage file lock to create an exclusive lock.
# Otherwise multiple calls to this script would clash.
flock "${dst}/" sh -c "time replaceNodeModules ${src} ${dst}"
